{"version":3,"sources":["index.js"],"names":["Square","props","className","isWinning","onClick","value","Board","fillBoard","rows","counter","i","rowSquares","j","push","renderSquare","this","winningSquares","includes","squares","React","Component","Game","state","history","Array","fill","stepNumber","xIsNext","slice","length","calculateWinner","setState","concat","location","step","status","current","winner","moves","map","move","desc","jumpTo","player","line","handleClick","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e2b5310f.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nfunction Square(props) {\r\n    return (\r\n      <button\r\n        className={\"square \" + (props.isWinning ? \"winnerpositions\" : null)}\r\n        onClick={props.onClick}>\r\n        {props.value}\r\n      </button>\r\n    );\r\n  }\r\n  \r\n  class Board extends React.Component {\r\n    renderSquare(i) {\r\n      return (\r\n        <Square\r\n          isWinning={this.props.winningSquares.includes(i)}\r\n          key={\"square \" + i}\r\n          value={this.props.squares[i]}\r\n          onClick={() => this.props.onClick(i)}\r\n        />\r\n      );\r\n    }\r\n  \r\n  fillBoard=()=>{\r\n      //make an empty array for storing the rows\r\n      let rows =[];\r\n      //a function scoped counter for keeping track of current square\r\n      let counter = 0;\r\n      for(let i= 0; i<3; i++){\r\n          //create an array to store each child of board-row (square)\r\n          let rowSquares = [];\r\n          for(let j = 0;j<3;j++){\r\n              //fill the second array with the children (squares)\r\n              rowSquares.push(this.renderSquare(counter));\r\n              //increase function scoped variable to track current square\r\n              counter++;\r\n          }\r\n      //push each row object into the first array with the children array included\r\n       rows.push(<div className=\"board-row\" key={i}>{rowSquares}</div>)\r\n      }\r\n      //return the rows array\r\n      return rows;\r\n  }\r\n  \r\n  render() {\r\n      //render the parent container div with its child the rows array\r\n     return(<div>{this.fillBoard()}</div>)\r\n  }}\r\n  class Game extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        history: [\r\n          {\r\n            squares: Array(9).fill(null)\r\n          }\r\n        ],\r\n        stepNumber: 0,\r\n        xIsNext: true\r\n      };\r\n    }\r\n  \r\n    handleClick(i) {\r\n      const locations = [\r\n        [1, 1],\r\n        [2, 1],\r\n        [3, 1],\r\n        [1, 2],\r\n        [2, 2],\r\n        [3, 2],\r\n        [1, 3],\r\n        [2, 3],\r\n        [3, 3]\r\n      ];    \r\n      \r\n      const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n      const current = history[history.length - 1];\r\n      const squares = current.squares.slice();\r\n      if (calculateWinner(squares) || squares[i]) {\r\n        return;\r\n      }\r\n      squares[i] = this.state.xIsNext ? \"X\" : \"O\";\r\n      this.setState({\r\n        history: history.concat([\r\n          {\r\n            squares: squares,\r\n            location: locations[i]\r\n          }\r\n        ]),\r\n        stepNumber: history.length,\r\n        xIsNext: !this.state.xIsNext\r\n      });\r\n    }\r\n  \r\n    jumpTo(step) {\r\n      this.setState({\r\n        stepNumber: step,\r\n        xIsNext: (step % 2) === 0\r\n      });\r\n    }\r\n  \r\n    render() {\r\n      const history = this.state.history;\r\n      const current = history[this.state.stepNumber];\r\n      const winner = calculateWinner(current.squares);\r\n  \r\n      const moves = history.map((step, move) => {\r\n        const desc = move ?\r\n          'Go to move #' + move + \" at \" + history[move].location:\r\n          'Go to game start';\r\n        return (\r\n          <li key={move}>\r\n            <button onClick={() => this.jumpTo(move)}>\r\n              {move == this.state.stepNumber ? <b>{desc}</b> : desc}\r\n            </button>\r\n          </li>\r\n        );\r\n      });\r\n  \r\n      let status;\r\n       if (!current.squares.includes(null)) {\r\n        status = \"draw\";\r\n      }\r\n      else if (winner) {\r\n        status = \"Winner: \" +  winner.player + \" at \" + winner.line;\r\n      } else{\r\n        status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\r\n      }\r\n      return (\r\n        <div className=\"game\">\r\n          <div className=\"game-board\">\r\n            <Board\r\n              winningSquares={winner ?\r\n              winner.line : []}\r\n              squares={current.squares}\r\n              onClick={i => this.handleClick(i)}              />\r\n          </div>\r\n          <div className=\"game-info\">\r\n            <div>{status}</div>\r\n            <ol>{moves}</ol>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  // =========================================\r\n  \r\n  ReactDOM.render(<Game />, document.getElementById(\"root\"));\r\n  \r\n  function calculateWinner(squares) {\r\n    const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6]\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c] = lines[i];\r\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n        return { player: squares[a], line: [a, b, c]};\r\n      }\r\n      \r\n      \r\n      \r\n    }\r\n    return null;\r\n    }\r\n  \r\n  \r\n  // ========================================\r\n  \r\n  ReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n  );\r\n  "],"sourceRoot":""}